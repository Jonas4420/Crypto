#include "crypto/DES.hpp"

#include <vector>

#include <cstring>

#define GET_UINT32(n,b,i)                          \
{                                                  \
	(n) = ((uint32_t)(b)[(i)    ] << 24)       \
	    | ((uint32_t)(b)[(i) + 1] << 16)       \
	    | ((uint32_t)(b)[(i) + 2] <<  8)       \
	    | ((uint32_t)(b)[(i) + 3]      );      \
}

#define PUT_UINT32(n,b,i)                          \
{                                                  \
	(b)[(i)    ] = (unsigned char)((n) >> 24); \
	(b)[(i) + 1] = (unsigned char)((n) >> 16); \
	(b)[(i) + 2] = (unsigned char)((n) >>  8); \
	(b)[(i) + 3] = (unsigned char)((n)      ); \
}

#define SWAP(a,b) { uint32_t t = a; a = b; b = t; t = 0; }

// Initial Permutation macro
#define DES_IP(X,Y)                                               \
{                                                                 \
	T = ((X >>  4) ^ Y) & 0x0F0F0F0F; Y ^= T; X ^= (T <<  4); \
	T = ((X >> 16) ^ Y) & 0x0000FFFF; Y ^= T; X ^= (T << 16); \
	T = ((Y >>  2) ^ X) & 0x33333333; X ^= T; Y ^= (T <<  2); \
	T = ((Y >>  8) ^ X) & 0x00FF00FF; X ^= T; Y ^= (T <<  8); \
	Y = ((Y << 1) | (Y >> 31)) & 0xFFFFFFFF;                  \
	T = (X ^ Y) & 0xAAAAAAAA; Y ^= T; X ^= T;                 \
	X = ((X << 1) | (X >> 31)) & 0xFFFFFFFF;                  \
}

// Final Permutation macro
#define DES_FP(X,Y)                                               \
{                                                                 \
	X = ((X << 31) | (X >> 1)) & 0xFFFFFFFF;                  \
	T = (X ^ Y) & 0xAAAAAAAA; X ^= T; Y ^= T;                 \
	Y = ((Y << 31) | (Y >> 1)) & 0xFFFFFFFF;                  \
	T = ((Y >>  8) ^ X) & 0x00FF00FF; X ^= T; Y ^= (T <<  8); \
	T = ((Y >>  2) ^ X) & 0x33333333; X ^= T; Y ^= (T <<  2); \
	T = ((X >> 16) ^ Y) & 0x0000FFFF; Y ^= T; X ^= (T << 16); \
	T = ((X >>  4) ^ Y) & 0x0F0F0F0F; Y ^= T; X ^= (T <<  4); \
}

// DES round macro
#define DES_ROUND(X,Y)                      \
{                                           \
	T = *sk++ ^ X;                      \
	Y ^= DES::SB[7][ (T      ) & 0x3F ] ^    \
	     DES::SB[5][ (T >>  8) & 0x3F ] ^    \
	     DES::SB[3][ (T >> 16) & 0x3F ] ^    \
	     DES::SB[1][ (T >> 24) & 0x3F ];     \
                                            \
	T = *sk++ ^ ((X << 28) | (X >> 4)); \
	Y ^= DES::SB[6][ (T      ) & 0x3F ] ^    \
             DES::SB[4][ (T >>  8) & 0x3F ] ^    \
             DES::SB[2][ (T >> 16) & 0x3F ] ^    \
             DES::SB[0][ (T >> 24) & 0x3F ];     \
}

namespace Crypto
{

DES::DES(const uint8_t *key, std::size_t key_sz)
	: SymmetricCipher(key, key_sz)
{
	if ( 8 != key_sz ) {
		throw DES::Exception("Key size is not supported");
	}

	// Set encryption subkeys
	set_key(sk_enc, key);

	// Set decryption subkeys
	memcpy(sk_dec, sk_enc, sizeof(sk_dec));

	for ( std::size_t i = 0 ; i < 16 ; i += 2 ) {
		SWAP(sk_dec[i    ], sk_dec[30 - i]);
		SWAP(sk_dec[i + 1], sk_dec[31 - i]);
	}
}

DES::~DES(void)
{
	zeroize(sk_enc, sizeof(sk_enc));
	zeroize(sk_dec, sizeof(sk_dec));
}

void
DES::encrypt(const uint8_t *plaintext, uint8_t *ciphertext) const
{
	process(sk_enc, plaintext, ciphertext);
}

void
DES::decrypt(const uint8_t *ciphertext, uint8_t *plaintext) const
{
	process(sk_dec, ciphertext, plaintext);
}

void
DES::set_parity_key(uint8_t *key, std::size_t key_sz)
{
	for ( std::size_t i = 0 ; i < key_sz ; ++i ) {
		key[i] = odd_parity_table[key[i] / 2];
	}
}

bool
DES::check_parity_key(const uint8_t *key, std::size_t key_sz)
{
	for ( std::size_t i = 0 ; i < key_sz ; ++i ) {
		if ( key[i] != odd_parity_table[key[i] / 2] ) {
			return false;
		}
	}

	return true;
}

bool
DES::is_weak_key(const uint8_t *key, std::size_t key_sz)
{
	uint8_t weak_keys[64][8] = {
		/* Weak keys (4) */
		{ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, { 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },
		{ 0x1F, 0x1F, 0x1F, 0x1F, 0x0E, 0x0E, 0x0E, 0x0E }, { 0xE0, 0xE0, 0xE0, 0xE0, 0xF1, 0xF1, 0xF1, 0xF1 },
		/* Semi weak keys (12) */
		{ 0x01, 0x1F, 0x01, 0x1F, 0x01, 0x0E, 0x01, 0x0E }, { 0x1F, 0x01, 0x1F, 0x01, 0x0E, 0x01, 0x0E, 0x01 },
		{ 0x01, 0xE0, 0x01, 0xE0, 0x01, 0xF1, 0x01, 0xF1 }, { 0xE0, 0x01, 0xE0, 0x01, 0xF1, 0x01, 0xF1, 0x01 },
		{ 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFE }, { 0xFE, 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFE, 0x01 },
		{ 0x1F, 0xE0, 0x1F, 0xE0, 0x0E, 0xF1, 0x0E, 0xF1 }, { 0xE0, 0x1F, 0xE0, 0x1F, 0xF1, 0x0E, 0xF1, 0x0E },
		{ 0x1F, 0xFE, 0x1F, 0xFE, 0x0E, 0xFE, 0x0E, 0xFE }, { 0xFE, 0x1F, 0xFE, 0x1F, 0xFE, 0x0E, 0xFE, 0x0E },
		{ 0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1, 0xFE }, { 0xFE, 0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1 },
		/* Possibly weak keys (48) */
		{ 0x01, 0x01, 0x1F, 0x1F, 0x01, 0x01, 0x0E, 0x0E }, { 0x1F, 0x1F, 0x01, 0x01, 0x0E, 0x0E, 0x01, 0x01 },
		{ 0xE0, 0xE0, 0x1F, 0x1F, 0xF1, 0xF1, 0x0E, 0x0E }, { 0x01, 0x01, 0xE0, 0xE0, 0x01, 0x01, 0xF1, 0xF1 },
		{ 0x1F, 0x1F, 0xE0, 0xE0, 0x0E, 0x0E, 0xF1, 0xF1 }, { 0xE0, 0xE0, 0xFE, 0xFE, 0xF1, 0xF1, 0xFE, 0xFE },
		{ 0x01, 0x01, 0xFE, 0xFE, 0x01, 0x01, 0xFE, 0xFE }, { 0x1F, 0x1F, 0xFE, 0xFE, 0x0E, 0x0E, 0xFE, 0xFE },
		{ 0xE0, 0xFE, 0x01, 0x1F, 0xF1, 0xFE, 0x01, 0x0E }, { 0x01, 0x1F, 0x1F, 0x01, 0x01, 0x0E, 0x0E, 0x01 },
		{ 0x1F, 0xE0, 0x01, 0xFE, 0x0E, 0xF1, 0x01, 0xFE }, { 0xE0, 0xFE, 0x1F, 0x01, 0xF1, 0xFE, 0x0E, 0x01 },
		{ 0x01, 0x1F, 0xE0, 0xFE, 0x01, 0x0E, 0xF1, 0xFE }, { 0x1F, 0xE0, 0xE0, 0x1F, 0x0E, 0xF1, 0xF1, 0x0E },
		{ 0xE0, 0xFE, 0xFE, 0xE0, 0xF1, 0xFE, 0xFE, 0xF1 }, { 0x01, 0x1F, 0xFE, 0xE0, 0x01, 0x0E, 0xFE, 0xF1 },
		{ 0x1F, 0xE0, 0xFE, 0x01, 0x0E, 0xF1, 0xFE, 0x01 }, { 0xFE, 0x01, 0x01, 0xFE, 0xFE, 0x01, 0x01, 0xFE },
		{ 0x01, 0xE0, 0x1F, 0xFE, 0x01, 0xF1, 0x0E, 0xFE }, { 0x1F, 0xFE, 0x01, 0xE0, 0x0E, 0xFE, 0x01, 0xF1 },
		{ 0xFE, 0x01, 0x1F, 0xE0, 0xFE, 0x01, 0x0E, 0xF1 }, { 0xFE, 0x01, 0xE0, 0x1F, 0xFE, 0x01, 0xF1, 0x0E },
		{ 0x1F, 0xFE, 0xE0, 0x01, 0x0E, 0xFE, 0xF1, 0x01 }, { 0xFE, 0x1F, 0x01, 0xE0, 0xFE, 0x0E, 0x01, 0xF1 },
		{ 0x01, 0xE0, 0xE0, 0x01, 0x01, 0xF1, 0xF1, 0x01 }, { 0x1F, 0xFE, 0xFE, 0x1F, 0x0E, 0xFE, 0xFE, 0x0E },
		{ 0xFE, 0x1F, 0xE0, 0x01, 0xFE, 0x0E, 0xF1, 0x01 }, { 0x01, 0xE0, 0xFE, 0x1F, 0x01, 0xF1, 0xFE, 0x0E },
		{ 0xE0, 0x01, 0x01, 0xE0, 0xF1, 0x01, 0x01, 0xF1 }, { 0xFE, 0x1F, 0x1F, 0xFE, 0xFE, 0x0E, 0x0E, 0xFE },
		{ 0x01, 0xFE, 0x1F, 0xE0, 0x01, 0xFE, 0x0E, 0xF1 }, { 0xE0, 0x01, 0x1F, 0xFE, 0xF1, 0x01, 0x0E, 0xFE },
		{ 0xFE, 0xE0, 0x01, 0x1F, 0xFE, 0xF1, 0x01, 0x0E }, { 0x01, 0xFE, 0xE0, 0x1F, 0x01, 0xFE, 0xF1, 0x0E },
		{ 0xE0, 0x01, 0xFE, 0x1F, 0xF1, 0x01, 0xFE, 0x0E }, { 0xFE, 0xE0, 0x1F, 0x01, 0xFE, 0xF1, 0x0E, 0x01 },
		{ 0x01, 0xFE, 0xFE, 0x01, 0x01, 0xFE, 0xFE, 0x01 }, { 0xE0, 0x1F, 0x01, 0xFE, 0xF1, 0x0E, 0x01, 0xFE },
		{ 0xFE, 0xE0, 0xE0, 0xFE, 0xFE, 0xF1, 0xF1, 0xFE }, { 0x1F, 0x01, 0x01, 0x1F, 0x0E, 0x01, 0x01, 0x0E },
		{ 0xE0, 0x1F, 0x1F, 0xE0, 0xF1, 0x0E, 0x0E, 0xF1 }, { 0xFE, 0xFE, 0x01, 0x01, 0xFE, 0xFE, 0x01, 0x01 },
		{ 0x1F, 0x01, 0xE0, 0xFE, 0x0E, 0x01, 0xF1, 0xFE }, { 0xE0, 0x1F, 0xFE, 0x01, 0xF1, 0x0E, 0xFE, 0x01 },
		{ 0xFE, 0xFE, 0x1F, 0x1F, 0xFE, 0xFE, 0x0E, 0x0E }, { 0x1F, 0x01, 0xFE, 0xE0, 0x0E, 0x01, 0xFE, 0xF1 },
		{ 0xE0, 0xE0, 0x01, 0x01, 0xF1, 0xF1, 0x01, 0x01 }, { 0xFE, 0xFE, 0xE0, 0xE0, 0xFE, 0xFE, 0xF1, 0xF1 }
	};

	if ( 8 != key_sz ) {
		throw DES::Exception("Key size is not supported");
	}

	for ( std::size_t i = 0 ; i < 64 ; ++i ) {
		if ( 0 == memcmp(key, weak_keys[i], 8) ) {
			return true;
		}
	}

	return false;
}

void
DES::set_key(uint32_t sk[32], const uint8_t key[8])
{
	uint32_t X, Y, T;

	GET_UINT32(X, key, 0);
	GET_UINT32(Y, key, 4);

	// Permuted Choice 1
	T = ((Y >>  4) ^ X) & 0x0F0F0F0F; X ^= T; Y ^= (T <<  4);
	T = ((Y      ) ^ X) & 0x10101010; X ^= T; Y ^= (T      );

	X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
	    | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
	    | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
	    | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);

	Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
	    | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
	    | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
	    | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);

	X &= 0x0FFFFFFF;
	Y &= 0x0FFFFFFF;

	// calculate subkeys
	for ( std::size_t i = 0 ; i < 16 ; ++i ) {
		if ( i < 2 || i == 8 || i == 15 ) {
			X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
			Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
		} else {
			X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
			Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
		}

		*sk++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
			| ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
			| ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
			| ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
			| ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
			| ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
			| ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
			| ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
			| ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
			| ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
			| ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);

		*sk++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
			| ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
			| ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
			| ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
			| ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
			| ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
			| ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
			| ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
			| ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
			| ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
			| ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
	}
}

void
DES::process(const uint32_t *sk, const uint8_t *input, uint8_t *output) const
{
    uint32_t X, Y, T;

    GET_UINT32(X, input, 0);
    GET_UINT32(Y, input, 4);

    DES_IP(X, Y);

    for ( std::size_t i = 0 ; i < 8 ; ++i ) {
	    DES_ROUND(Y, X);
	    DES_ROUND(X, Y);
    }

    DES_FP(Y, X);

    PUT_UINT32(Y, output, 0);
    PUT_UINT32(X, output, 4);
}

const uint8_t DES::odd_parity_table[128] = {
	  1,   2,   4,   7,   8,  11,  13,  14,  16,  19,  21,  22,  25,  26,  28,  31,
	 32,  35,  37,  38,  41,  42,  44,  47,  49,  50,  52,  55,  56,  59,  61,  62,
	 64,  67,  69,  70,  73,  74,  76,  79,  81,  82,  84,  87,  88,  91,  93,  94,
	 97,  98, 100, 103, 104, 107, 109, 110, 112, 115, 117, 118, 121, 122, 124, 127,
	128, 131, 133, 134, 137, 138, 140, 143, 145, 146, 148, 151, 152, 155, 157, 158,
	161, 162, 164, 167, 168, 171, 173, 174, 176, 179, 181, 182, 185, 186, 188, 191,
	193, 194, 196, 199, 200, 203, 205, 206, 208, 211, 213, 214, 217, 218, 220, 223,
	224, 227, 229, 230, 233, 234, 236, 239, 241, 242, 244, 247, 248, 251, 253, 254
};

// PC1: left and right halves bit-swap
const uint32_t DES::LHs[16] = {
	0x00000000, 0x00000001, 0x00000100, 0x00000101,
	0x00010000, 0x00010001, 0x00010100, 0x00010101,
	0x01000000, 0x01000001, 0x01000100, 0x01000101,
	0x01010000, 0x01010001, 0x01010100, 0x01010101
};

const uint32_t DES::RHs[16] = {
	0x00000000, 0x01000000, 0x00010000, 0x01010000,
	0x00000100, 0x01000100, 0x00010100, 0x01010100,
	0x00000001, 0x01000001, 0x00010001, 0x01010001,
	0x00000101, 0x01000101, 0x00010101, 0x01010101,
};

// Expanded DES S-boxes
const uint32_t DES::SB[8][64] = {
	// SBox 1
	{
		0x01010400, 0x00000000, 0x00010000, 0x01010404,
		0x01010004, 0x00010404, 0x00000004, 0x00010000,
		0x00000400, 0x01010400, 0x01010404, 0x00000400,
		0x01000404, 0x01010004, 0x01000000, 0x00000004,
		0x00000404, 0x01000400, 0x01000400, 0x00010400,
		0x00010400, 0x01010000, 0x01010000, 0x01000404,
		0x00010004, 0x01000004, 0x01000004, 0x00010004,
		0x00000000, 0x00000404, 0x00010404, 0x01000000,
		0x00010000, 0x01010404, 0x00000004, 0x01010000,
		0x01010400, 0x01000000, 0x01000000, 0x00000400,
		0x01010004, 0x00010000, 0x00010400, 0x01000004,
		0x00000400, 0x00000004, 0x01000404, 0x00010404,
		0x01010404, 0x00010004, 0x01010000, 0x01000404,
		0x01000004, 0x00000404, 0x00010404, 0x01010400,
		0x00000404, 0x01000400, 0x01000400, 0x00000000,
		0x00010004, 0x00010400, 0x00000000, 0x01010004
	},
	// SBox 2
	{
		0x80108020, 0x80008000, 0x00008000, 0x00108020,
		0x00100000, 0x00000020, 0x80100020, 0x80008020,
		0x80000020, 0x80108020, 0x80108000, 0x80000000,
		0x80008000, 0x00100000, 0x00000020, 0x80100020,
		0x00108000, 0x00100020, 0x80008020, 0x00000000,
		0x80000000, 0x00008000, 0x00108020, 0x80100000,
		0x00100020, 0x80000020, 0x00000000, 0x00108000,
		0x00008020, 0x80108000, 0x80100000, 0x00008020,
		0x00000000, 0x00108020, 0x80100020, 0x00100000,
		0x80008020, 0x80100000, 0x80108000, 0x00008000,
		0x80100000, 0x80008000, 0x00000020, 0x80108020,
		0x00108020, 0x00000020, 0x00008000, 0x80000000,
		0x00008020, 0x80108000, 0x00100000, 0x80000020,
		0x00100020, 0x80008020, 0x80000020, 0x00100020,
		0x00108000, 0x00000000, 0x80008000, 0x00008020,
		0x80000000, 0x80100020, 0x80108020, 0x00108000
	},
	// SBox 3
	{
		0x00000208, 0x08020200, 0x00000000, 0x08020008,
		0x08000200, 0x00000000, 0x00020208, 0x08000200,
		0x00020008, 0x08000008, 0x08000008, 0x00020000,
		0x08020208, 0x00020008, 0x08020000, 0x00000208,
		0x08000000, 0x00000008, 0x08020200, 0x00000200,
		0x00020200, 0x08020000, 0x08020008, 0x00020208,
		0x08000208, 0x00020200, 0x00020000, 0x08000208,
		0x00000008, 0x08020208, 0x00000200, 0x08000000,
		0x08020200, 0x08000000, 0x00020008, 0x00000208,
		0x00020000, 0x08020200, 0x08000200, 0x00000000,
		0x00000200, 0x00020008, 0x08020208, 0x08000200,
		0x08000008, 0x00000200, 0x00000000, 0x08020008,
		0x08000208, 0x00020000, 0x08000000, 0x08020208,
		0x00000008, 0x00020208, 0x00020200, 0x08000008,
		0x08020000, 0x08000208, 0x00000208, 0x08020000,
		0x00020208, 0x00000008, 0x08020008, 0x00020200
	},
	// SBox 4
	{
		0x00802001, 0x00002081, 0x00002081, 0x00000080,
		0x00802080, 0x00800081, 0x00800001, 0x00002001,
		0x00000000, 0x00802000, 0x00802000, 0x00802081,
		0x00000081, 0x00000000, 0x00800080, 0x00800001,
		0x00000001, 0x00002000, 0x00800000, 0x00802001,
		0x00000080, 0x00800000, 0x00002001, 0x00002080,
		0x00800081, 0x00000001, 0x00002080, 0x00800080,
		0x00002000, 0x00802080, 0x00802081, 0x00000081,
		0x00800080, 0x00800001, 0x00802000, 0x00802081,
		0x00000081, 0x00000000, 0x00000000, 0x00802000,
		0x00002080, 0x00800080, 0x00800081, 0x00000001,
		0x00802001, 0x00002081, 0x00002081, 0x00000080,
		0x00802081, 0x00000081, 0x00000001, 0x00002000,
		0x00800001, 0x00002001, 0x00802080, 0x00800081,
		0x00002001, 0x00002080, 0x00800000, 0x00802001,
		0x00000080, 0x00800000, 0x00002000, 0x00802080
	},
	// SBox 5
	{
		0x00000100, 0x02080100, 0x02080000, 0x42000100,
		0x00080000, 0x00000100, 0x40000000, 0x02080000,
		0x40080100, 0x00080000, 0x02000100, 0x40080100,
		0x42000100, 0x42080000, 0x00080100, 0x40000000,
		0x02000000, 0x40080000, 0x40080000, 0x00000000,
		0x40000100, 0x42080100, 0x42080100, 0x02000100,
		0x42080000, 0x40000100, 0x00000000, 0x42000000,
		0x02080100, 0x02000000, 0x42000000, 0x00080100,
		0x00080000, 0x42000100, 0x00000100, 0x02000000,
		0x40000000, 0x02080000, 0x42000100, 0x40080100,
		0x02000100, 0x40000000, 0x42080000, 0x02080100,
		0x40080100, 0x00000100, 0x02000000, 0x42080000,
		0x42080100, 0x00080100, 0x42000000, 0x42080100,
		0x02080000, 0x00000000, 0x40080000, 0x42000000,
		0x00080100, 0x02000100, 0x40000100, 0x00080000,
		0x00000000, 0x40080000, 0x02080100, 0x40000100
	},
	// SBox 6
	{
		0x20000010, 0x20400000, 0x00004000, 0x20404010,
		0x20400000, 0x00000010, 0x20404010, 0x00400000,
		0x20004000, 0x00404010, 0x00400000, 0x20000010,
		0x00400010, 0x20004000, 0x20000000, 0x00004010,
		0x00000000, 0x00400010, 0x20004010, 0x00004000,
		0x00404000, 0x20004010, 0x00000010, 0x20400010,
		0x20400010, 0x00000000, 0x00404010, 0x20404000,
		0x00004010, 0x00404000, 0x20404000, 0x20000000,
		0x20004000, 0x00000010, 0x20400010, 0x00404000,
		0x20404010, 0x00400000, 0x00004010, 0x20000010,
		0x00400000, 0x20004000, 0x20000000, 0x00004010,
		0x20000010, 0x20404010, 0x00404000, 0x20400000,
		0x00404010, 0x20404000, 0x00000000, 0x20400010,
		0x00000010, 0x00004000, 0x20400000, 0x00404010,
		0x00004000, 0x00400010, 0x20004010, 0x00000000,
		0x20404000, 0x20000000, 0x00400010, 0x20004010
	},
	// SBox 7
	{
		0x00200000, 0x04200002, 0x04000802, 0x00000000,
		0x00000800, 0x04000802, 0x00200802, 0x04200800,
		0x04200802, 0x00200000, 0x00000000, 0x04000002,
		0x00000002, 0x04000000, 0x04200002, 0x00000802,
		0x04000800, 0x00200802, 0x00200002, 0x04000800,
		0x04000002, 0x04200000, 0x04200800, 0x00200002,
		0x04200000, 0x00000800, 0x00000802, 0x04200802,
		0x00200800, 0x00000002, 0x04000000, 0x00200800,
		0x04000000, 0x00200800, 0x00200000, 0x04000802,
		0x04000802, 0x04200002, 0x04200002, 0x00000002,
		0x00200002, 0x04000000, 0x04000800, 0x00200000,
		0x04200800, 0x00000802, 0x00200802, 0x04200800,
		0x00000802, 0x04000002, 0x04200802, 0x04200000,
		0x00200800, 0x00000000, 0x00000002, 0x04200802,
		0x00000000, 0x00200802, 0x04200000, 0x00000800,
		0x04000002, 0x04000800, 0x00000800, 0x00200002
	},
	// SBox 8
	{
		0x10001040, 0x00001000, 0x00040000, 0x10041040,
		0x10000000, 0x10001040, 0x00000040, 0x10000000,
		0x00040040, 0x10040000, 0x10041040, 0x00041000,
		0x10041000, 0x00041040, 0x00001000, 0x00000040,
		0x10040000, 0x10000040, 0x10001000, 0x00001040,
		0x00041000, 0x00040040, 0x10040040, 0x10041000,
		0x00001040, 0x00000000, 0x00000000, 0x10040040,
		0x10000040, 0x10001000, 0x00041040, 0x00040000,
		0x00041040, 0x00040000, 0x10041000, 0x00001000,
		0x00000040, 0x10040040, 0x00001000, 0x00041040,
		0x10001000, 0x00000040, 0x10000040, 0x10040000,
		0x10040040, 0x10000000, 0x00040000, 0x10001040,
		0x00000000, 0x10041040, 0x00040040, 0x10000040,
		0x10040000, 0x10001000, 0x10001040, 0x00000000,
		0x10041040, 0x00041000, 0x00041000, 0x00001040,
		0x00001040, 0x00040040, 0x10000000, 0x10041000
	}
};

TripleDES::TripleDES(const uint8_t *key, std::size_t key_sz)
	: SymmetricCipher(key, key_sz)
{
	if ( 16 != key_sz && 24 != key_sz ) {
		throw TripleDES::Exception("Key size is not supported");
	}

	if ( 16 == key_sz ) {
		/* 112 bits of security */
		set_2key(sk_enc, sk_dec, key);
	} else {
		/* 168 bits of security */
		set_3key(sk_enc, sk_dec, key);
	}
}

TripleDES::~TripleDES(void)
{
	zeroize(sk_enc, sizeof(sk_enc));
	zeroize(sk_dec, sizeof(sk_dec));
}

void
TripleDES::encrypt(const uint8_t *plaintext, uint8_t *ciphertext) const
{
	process(sk_enc, plaintext, ciphertext);
}

void
TripleDES::decrypt(const uint8_t *ciphertext, uint8_t *plaintext) const
{
	process(sk_dec, ciphertext, plaintext);
}

void
TripleDES::set_parity_key(uint8_t *key, std::size_t key_sz)
{
	DES::set_parity_key(key, key_sz);
}

bool
TripleDES::check_parity_key(const uint8_t *key, std::size_t key_sz)
{
	return DES::check_parity_key(key, key_sz);
}

bool
TripleDES::is_weak_key(const uint8_t *key, std::size_t key_sz)
{
	if ( 16 != key_sz && 24 != key_sz ) {
		throw TripleDES::Exception("Key size is not supported");
	}

	// Check K1 == K2
	if ( 0 == memcmp(key, key + 8,  8) )     { return true; }
	if ( 16 == key_sz ) { return false; }
	// Check K1 == K3 and K2 == K3
	if ( 0 == memcmp(key,     key + 16, 8) ) { return true; }
	if ( 0 == memcmp(key + 8, key + 16, 8) ) { return true; }

	return false;
}

void
TripleDES::set_2key(uint32_t esk[96], uint32_t dsk[96], const uint8_t key[16])
{
	DES::set_key(esk,      key);
	DES::set_key(dsk + 32, key + 8);

	for ( std::size_t i = 0 ; i < 32 ; i += 2 ) {
		dsk[i     ] = esk[30 - i];
		dsk[i +  1] = esk[31 - i];

		esk[i + 32] = dsk[62 - i];
		esk[i + 33] = dsk[63 - i];

		esk[i + 64] = esk[i    ];
		esk[i + 65] = esk[i + 1];

		dsk[i + 64] = dsk[i    ];
		dsk[i + 65] = dsk[i + 1];
	}
}

void
TripleDES::set_3key(uint32_t esk[96], uint32_t dsk[96], const uint8_t key[24])
{
	DES::set_key(esk,      key);
	DES::set_key(dsk + 32, key +  8);
	DES::set_key(esk + 64, key + 16);

	for ( std::size_t i = 0 ; i < 32 ; i += 2 ) {
		dsk[i     ] = esk[94 - i];
		dsk[i +  1] = esk[95 - i];

		esk[i + 32] = dsk[62 - i];
		esk[i + 33] = dsk[63 - i];

		dsk[i + 64] = esk[30 - i];
		dsk[i + 65] = esk[31 - i];
	}
}

void
TripleDES::process(const uint32_t *sk, const uint8_t *input, uint8_t *output) const
{
	uint32_t X, Y, T;

	GET_UINT32(X, input, 0);
	GET_UINT32(Y, input, 4);

	DES_IP(X, Y);

	for ( std::size_t i = 0 ; i < 8 ; ++i ) {
		DES_ROUND(Y, X);
		DES_ROUND(X, Y);
	}

	for ( std::size_t i = 0 ; i < 8 ; ++i ) {
		DES_ROUND(X, Y);
		DES_ROUND(Y, X);
	}

	for ( std::size_t i = 0 ; i < 8 ; i++ ) {
		DES_ROUND(Y, X);
		DES_ROUND(X, Y);
	}

	DES_FP(Y, X);

	PUT_UINT32(Y, output, 0);
	PUT_UINT32(X, output, 4);
}

}
