#include "crypto/Twofish.hpp"

#include <cstring>

// TODO: understand RS
// TODO: Optimize operations
// TODO: zeroization

#define GET_UINT32_BE(n,b,i)                       \
{                                                  \
	(n) = ((uint32_t)(b)[(i)    ]      )       \
	    | ((uint32_t)(b)[(i) + 1] <<  8)       \
	    | ((uint32_t)(b)[(i) + 2] << 16)       \
	    | ((uint32_t)(b)[(i) + 3] << 24);      \
}

#define PUT_UINT32_BE(n,b,i)                       \
{                                                  \
	(b)[(i)    ] = (uint8_t)((n)      );       \
	(b)[(i) + 1] = (uint8_t)((n) >>  8);       \
	(b)[(i) + 2] = (uint8_t)((n) >> 16);       \
	(b)[(i) + 3] = (uint8_t)((n) >> 24);       \
}

namespace Crypto
{

Twofish::Twofish(const uint8_t *key, std::size_t key_sz)
	: SymmetricCipher(key, key_sz)
{
	std::size_t N, k;
	uint8_t m[32];
	uint32_t M[8], M_e[4], M_o[4], S[4];

	if ( key_sz > 32 ) {
		throw Twofish::Exception("Key size is not supported");
	}

	// Get the key size
	N = (key_sz <= 16) ? 128 : (key_sz <= 24 ? 192 : 256);
	k = N / 64;

	// Pad the key with 0s
	memset(m, 0x00, sizeof(m));
	memcpy(m, key, key_sz);

	// Construct M
	for ( std::size_t i = 0 ; i < 2 * k ; ++i ) {
		GET_UINT32_BE(M[i], m, 4 * i);
	}

	// Construct Me and Mo
	for ( std::size_t i = 0 ; i < k ; ++i ) {
		M_e[i] = M[2 * i];
		M_o[i] = M[2 * i + 1];
	}

	// Construct S (reverse order)
	for ( std::size_t i = 0 ; i < k ; ++i ) {
		S[k - 1 - i] = RS(&m[8 * i]);
	}

	// Construct Expanded Key Words
	uint32_t A[20];
	uint32_t B[20];
	uint32_t p = (1 << 24) ^ (1 << 16) ^ (1 << 8) ^ 1;

	for ( std::size_t i = 0 ; i < 20 ; ++i ) {
		A[i]         =     h( 2 * i      * p, M_e, k);
		B[i]         = ROL(h((2 * i + 1) * p, M_o, k), 8);
		K[2 * i]     =     A[i] +     B[i];
		K[2 * i + 1] = ROL(A[i] + 2 * B[i], 9);
	}

	// Construct key dependant S-boxes
	for ( std::size_t x = 0 ; x < 256 ; ++x ) {
		uint32_t p = (1 << 24) ^ (1 << 16) ^ (1 << 8) ^ 1;
		uint8_t temp[4];

		h_core(x * p, S, k, temp);

		s[0][x] = temp[0];
		s[1][x] = temp[1];
		s[2][x] = temp[2];
		s[3][x] = temp[3];
	}
}

Twofish::~Twofish(void)
{
	zeroize(K, sizeof(K));
	zeroize(s, sizeof(s));
}

void
Twofish::encrypt(const uint8_t *plaintext, uint8_t *ciphertext) const
{
	uint32_t P[4], R[17][4], T[2], F[16][2], C[4];

	// Plaintext conversion
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		GET_UINT32_BE(P[i], plaintext, 4 * i);
	}

	// Input whitening
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		R[0][i] = P[i] ^ K[i];
	}

	// 16 Rounds of Twofish
	for ( std::size_t r = 0 ; r < 16 ; ++r ) {
		// Function F
		T[0]    = g(R[r][0]);
		T[1]    = g(ROL(R[r][1], 8));
		F[r][0] = T[0] +    T[1] + K[2*r+8];
		F[r][1] = T[0] + 2* T[1] + K[2*r+9];

		R[r+1][0] = ROR(R[r][2] ^ F[r][0], 1);
		R[r+1][1] = ROL(R[r][3], 1) ^ F[r][1];
		R[r+1][2] = R[r][0];
		R[r+1][3] = R[r][1];
	}

	// Output whitening and undo swap
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		C[i] = R[16][(i+2) % 4] ^ K[i + 4];
	}

	// Ciphertext conversion
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		PUT_UINT32_BE(C[i], ciphertext, 4 * i);
	}
}

void
Twofish::decrypt(const uint8_t *ciphertext, uint8_t *plaintext) const
{
	uint32_t C[4], R[17][4], T[2], F[16][2], P[4];

	// Ciphertext conversion
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		GET_UINT32_BE(C[i], ciphertext, 4 * i);
	}

	// Input whitening and swap
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		R[16][(i+2) % 4] = C[i] ^ K[i + 4];
	}

	// 16 Rounds of Twofish
	for ( std::size_t r = 15 ; r < 16 ; --r ) {
		R[r][0] = R[r+1][2];
		R[r][1] = R[r+1][3];

		// Function F
		T[0]    = g(R[r][0]);
		T[1]    = g(ROL(R[r][1], 8));
		F[r][0] = T[0] +    T[1] + K[2*r+8];
		F[r][1] = T[0] + 2* T[1] + K[2*r+9];

		R[r][2] = ROL(R[r+1][0], 1) ^ F[r][0];
		R[r][3] = ROR(R[r+1][1] ^ F[r][1], 1);
	}

	// Output whitening
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		P[i] = R[0][i] ^ K[i];
	}

	// Plaintext conversion
	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		PUT_UINT32_BE(P[i], plaintext, 4 * i);
	}
}

void
Twofish::h_core(uint32_t X, const uint32_t *L, std::size_t k, uint8_t Y[4]) const
{
	uint8_t l[4][4], x[4], y[5][4];

	// Construct l bytes
	for ( std::size_t i = 0 ; i < k ; ++i ) {
		PUT_UINT32_BE(L[i], l[i], 0);
	}

	// Construct x bytes
	PUT_UINT32_BE(X, x, 0);

	for ( std::size_t j = 0 ; j < 4 ; ++j ) {
		y[k][j] = x[j];
	}

	if ( k == 4 ) {
		y[3][0] = q[1][y[4][0]] ^ l[3][0];
		y[3][1] = q[0][y[4][1]] ^ l[3][1];
		y[3][2] = q[0][y[4][2]] ^ l[3][2];
		y[3][3] = q[1][y[4][3]] ^ l[3][3];
	}

	if ( k >= 3 ) {
		y[2][0] = q[1][y[3][0]] ^ l[2][0];
		y[2][1] = q[1][y[3][1]] ^ l[2][1];
		y[2][2] = q[0][y[3][2]] ^ l[2][2];
		y[2][3] = q[0][y[3][3]] ^ l[2][3];
	}

	Y[0] = q[1][q[0][q[0][y[2][0]] ^ l[1][0]] ^ l[0][0]];
	Y[1] = q[0][q[0][q[1][y[2][1]] ^ l[1][1]] ^ l[0][1]];
	Y[2] = q[1][q[1][q[0][y[2][2]] ^ l[1][2]] ^ l[0][2]];
	Y[3] = q[0][q[1][q[1][y[2][3]] ^ l[1][3]] ^ l[0][3]];
}

uint32_t
Twofish::h(uint32_t X, const uint32_t *L, std::size_t k) const
{
	uint8_t y[4];
	uint32_t Z;

	h_core(X, L, k, y);
	Z = MDS(y);

	return Z;
}

uint32_t
Twofish::g(uint32_t X) const
{
	uint8_t x[4], y[4];
	uint32_t Z;

	PUT_UINT32_BE(X, x, 0);

	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		y[i] = s[i][x[i]];
	}

	Z = MDS(y);

	return Z;
}

uint32_t
Twofish::ROL(uint32_t x, std::size_t n)
{
	return (x << n) | (x >> (32 - n));
}

uint32_t
Twofish::ROR(uint32_t x, std::size_t n)
{
	return (x >> n) | (x << (32 - n));
}

uint32_t
Twofish::RS(uint8_t m[8])
{
	uint8_t s[4];
	uint32_t S;

	uint8_t RS_mat[4][8] = {
		{ 0x01, 0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E },
		{ 0xA4, 0x56, 0x82, 0xF3, 0x1E, 0xC6, 0x68, 0xE5 },
		{ 0x02, 0xA1, 0xFC, 0xC1, 0x47, 0xAE, 0x3D, 0x19 },
		{ 0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E, 0x03 }
	};

	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		s[i] = 0;

		for ( std::size_t j = 0 ; j < 8 ; ++j ) {
			s[i] ^= RS_mult(RS_mat[i][j], m[j]);
		}
	}

	GET_UINT32_BE(S, s, 0);

	return S;
}

uint8_t
Twofish::RS_mult(uint8_t p, uint8_t q)
{
	uint16_t r = 0;
	uint16_t w = 0x014D;

	// Perform P(X) * Q(X)
	for ( std::size_t i = 0 ; i < 8 ; ++i ) {
		if ( 0 != (q & 0x01) ) {
			// Ri(X) = Ri-1(X) + P(X)qiX^i
			r ^= (p << i);
		}

		q >>= 1;
	}

	// w(X) = X^8 + X^6 + X^3 + X^2 + 1 = 0x014D
	// Reduce over GF(2^8) = F(2)[X] / (X^8 + X^6 + X^3 + X^2 + 1)
	// R(X) = r0 + r1X + ... + r7X^7 + r8X^8+ r9X^9 + ...
	//      = r0 + r1X + ... + r7X^7 + r8(X^6 + X^3 + X^2 + 1) + r9X^9 + ... + r14X^14
	for ( std::size_t i = 0 ; i < 8 ; ++i ) {
		if ( 0 != (r & (1 << (8 + (8 - i - 1)))) ) {
			r ^= (w << (8 - i - 1));
		}
	}

	return static_cast<uint8_t>(r);
}

uint32_t
Twofish::MDS(uint8_t y[4])
{
	uint8_t z[4];
	uint32_t Z;

	uint8_t MDS_mat[4][4] = {
		{ 0x01, 0xEF, 0x5B, 0x5B },
		{ 0x5B, 0xEF, 0xEF, 0x01 },
		{ 0xEF, 0x5B, 0x01, 0xEF },
		{ 0xEF, 0x01, 0xEF, 0x5B }
	};

	for ( std::size_t i = 0 ; i < 4 ; ++i ) {
		z[i] = 0;

		for ( std::size_t j = 0 ; j < 4 ; ++j ) {
			z[i] ^= MDS_mult(MDS_mat[i][j], y[j]);
		}
	}
	
	GET_UINT32_BE(Z, z, 0);

	return Z;
}

uint8_t
Twofish::MDS_mult(uint8_t p, uint8_t q)
{
	uint8_t x_inv = 0xB4;
	uint8_t qx_inv, qx2_inv, q5b, qef;

	// Q/X
	qx_inv  = (q >> 1)      ^ (q      & 0x01 ? x_inv : 0x00);
	// Q/X^2
	qx2_inv = (qx_inv >> 1) ^ (qx_inv & 0x01 ? x_inv : 0x00);
	// Q*(1 + 1/X^2)
	q5b     = qx2_inv ^ q;
	// Q*(1 + 1/X + 1/X^2) = Q*(1 + 1/X^2) + Q/X
	qef     = q5b ^ qx_inv;

	if ( p == 0x01 ) { return q; }
	if ( p == 0xEF ) { return qef; }
	if ( p == 0x5B ) { return q5b; }

	throw Twofish::Exception("Bad MDS multiplication");
	return 0;
}

const uint8_t Twofish::q[2][256] = {
	{
		0xa9, 0x67, 0xb3, 0xe8, 0x04, 0xfd, 0xa3, 0x76, 0x9a, 0x92, 0x80, 0x78, 0xe4, 0xdd, 0xd1, 0x38,
		0x0d, 0xc6, 0x35, 0x98, 0x18, 0xf7, 0xec, 0x6c, 0x43, 0x75, 0x37, 0x26, 0xfa, 0x13, 0x94, 0x48,
		0xf2, 0xd0, 0x8b, 0x30, 0x84, 0x54, 0xdf, 0x23, 0x19, 0x5b, 0x3d, 0x59, 0xf3, 0xae, 0xa2, 0x82,
		0x63, 0x01, 0x83, 0x2e, 0xd9, 0x51, 0x9b, 0x7c, 0xa6, 0xeb, 0xa5, 0xbe, 0x16, 0x0c, 0xe3, 0x61,
		0xc0, 0x8c, 0x3a, 0xf5, 0x73, 0x2c, 0x25, 0x0b, 0xbb, 0x4e, 0x89, 0x6b, 0x53, 0x6a, 0xb4, 0xf1,
		0xe1, 0xe6, 0xbd, 0x45, 0xe2, 0xf4, 0xb6, 0x66, 0xcc, 0x95, 0x03, 0x56, 0xd4, 0x1c, 0x1e, 0xd7,
		0xfb, 0xc3, 0x8e, 0xb5, 0xe9, 0xcf, 0xbf, 0xba, 0xea, 0x77, 0x39, 0xaf, 0x33, 0xc9, 0x62, 0x71,
		0x81, 0x79, 0x09, 0xad, 0x24, 0xcd, 0xf9, 0xd8, 0xe5, 0xc5, 0xb9, 0x4d, 0x44, 0x08, 0x86, 0xe7,
		0xa1, 0x1d, 0xaa, 0xed, 0x06, 0x70, 0xb2, 0xd2, 0x41, 0x7b, 0xa0, 0x11, 0x31, 0xc2, 0x27, 0x90,
		0x20, 0xf6, 0x60, 0xff, 0x96, 0x5c, 0xb1, 0xab, 0x9e, 0x9c, 0x52, 0x1b, 0x5f, 0x93, 0x0a, 0xef,
		0x91, 0x85, 0x49, 0xee, 0x2d, 0x4f, 0x8f, 0x3b, 0x47, 0x87, 0x6d, 0x46, 0xd6, 0x3e, 0x69, 0x64,
		0x2a, 0xce, 0xcb, 0x2f, 0xfc, 0x97, 0x05, 0x7a, 0xac, 0x7f, 0xd5, 0x1a, 0x4b, 0x0e, 0xa7, 0x5a,
		0x28, 0x14, 0x3f, 0x29, 0x88, 0x3c, 0x4c, 0x02, 0xb8, 0xda, 0xb0, 0x17, 0x55, 0x1f, 0x8a, 0x7d,
		0x57, 0xc7, 0x8d, 0x74, 0xb7, 0xc4, 0x9f, 0x72, 0x7e, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34,
		0x6e, 0x50, 0xde, 0x68, 0x65, 0xbc, 0xdb, 0xf8, 0xc8, 0xa8, 0x2b, 0x40, 0xdc, 0xfe, 0x32, 0xa4,
		0xca, 0x10, 0x21, 0xf0, 0xd3, 0x5d, 0x0f, 0x00, 0x6f, 0x9d, 0x36, 0x42, 0x4a, 0x5e, 0xc1, 0xe0
	}, {
		0x75, 0xf3, 0xc6, 0xf4, 0xdb, 0x7b, 0xfb, 0xc8, 0x4a, 0xd3, 0xe6, 0x6b, 0x45, 0x7d, 0xe8, 0x4b,
		0xd6, 0x32, 0xd8, 0xfd, 0x37, 0x71, 0xf1, 0xe1, 0x30, 0x0f, 0xf8, 0x1b, 0x87, 0xfa, 0x06, 0x3f,
		0x5e, 0xba, 0xae, 0x5b, 0x8a, 0x00, 0xbc, 0x9d, 0x6d, 0xc1, 0xb1, 0x0e, 0x80, 0x5d, 0xd2, 0xd5,
		0xa0, 0x84, 0x07, 0x14, 0xb5, 0x90, 0x2c, 0xa3, 0xb2, 0x73, 0x4c, 0x54, 0x92, 0x74, 0x36, 0x51,
		0x38, 0xb0, 0xbd, 0x5a, 0xfc, 0x60, 0x62, 0x96, 0x6c, 0x42, 0xf7, 0x10, 0x7c, 0x28, 0x27, 0x8c,
		0x13, 0x95, 0x9c, 0xc7, 0x24, 0x46, 0x3b, 0x70, 0xca, 0xe3, 0x85, 0xcb, 0x11, 0xd0, 0x93, 0xb8,
		0xa6, 0x83, 0x20, 0xff, 0x9f, 0x77, 0xc3, 0xcc, 0x03, 0x6f, 0x08, 0xbf, 0x40, 0xe7, 0x2b, 0xe2,
		0x79, 0x0c, 0xaa, 0x82, 0x41, 0x3a, 0xea, 0xb9, 0xe4, 0x9a, 0xa4, 0x97, 0x7e, 0xda, 0x7a, 0x17,
		0x66, 0x94, 0xa1, 0x1d, 0x3d, 0xf0, 0xde, 0xb3, 0x0b, 0x72, 0xa7, 0x1c, 0xef, 0xd1, 0x53, 0x3e,
		0x8f, 0x33, 0x26, 0x5f, 0xec, 0x76, 0x2a, 0x49, 0x81, 0x88, 0xee, 0x21, 0xc4, 0x1a, 0xeb, 0xd9,
		0xc5, 0x39, 0x99, 0xcd, 0xad, 0x31, 0x8b, 0x01, 0x18, 0x23, 0xdd, 0x1f, 0x4e, 0x2d, 0xf9, 0x48,
		0x4f, 0xf2, 0x65, 0x8e, 0x78, 0x5c, 0x58, 0x19, 0x8d, 0xe5, 0x98, 0x57, 0x67, 0x7f, 0x05, 0x64,
		0xaf, 0x63, 0xb6, 0xfe, 0xf5, 0xb7, 0x3c, 0xa5, 0xce, 0xe9, 0x68, 0x44, 0xe0, 0x4d, 0x43, 0x69,
		0x29, 0x2e, 0xac, 0x15, 0x59, 0xa8, 0x0a, 0x9e, 0x6e, 0x47, 0xdf, 0x34, 0x35, 0x6a, 0xcf, 0xdc,
		0x22, 0xc9, 0xc0, 0x9b, 0x89, 0xd4, 0xed, 0xab, 0x12, 0xa2, 0x0d, 0x52, 0xbb, 0x02, 0x2f, 0xa9,
		0xd7, 0x61, 0x1e, 0xb4, 0x50, 0x04, 0xf6, 0xc2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xbe, 0x91
	}
};

}
